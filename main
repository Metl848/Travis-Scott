import { useState, useEffect, useCallback, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { toast } from 'sonner';
import travisRunner from '@/assets/travis-runner.jpg';

interface Obstacle {
  id: number;
  x: number;
  y: number;
  type: 'cactus' | 'flame' | 'cosmic';
}

interface Collectible {
  id: number;
  x: number;
  y: number;
  type: 'vinyl' | 'star' | 'flame';
  collected: boolean;
}

const GameRunner = () => {
  const [gameState, setGameState] = useState<'menu' | 'playing' | 'gameOver'>('menu');
  const [score, setScore] = useState(0);
  const [highScore, setHighScore] = useState(() => {
    return parseInt(localStorage.getItem('astroworld-high-score') || '0');
  });
  const [playerY, setPlayerY] = useState(60);
  const [isJumping, setIsJumping] = useState(false);
  const [obstacles, setObstacles] = useState<Obstacle[]>([]);
  const [collectibles, setCollectibles] = useState<Collectible[]>([]);
  const [gameSpeed, setGameSpeed] = useState(3);

  const gameLoopRef = useRef<number>();
  const obstacleSpawnRef = useRef<number>();
  const collectibleSpawnRef = useRef<number>();

  const jump = useCallback(() => {
    if (gameState !== 'playing' || isJumping) return;
    
    setIsJumping(true);
    setPlayerY(30);
    
    setTimeout(() => {
      setPlayerY(60);
      setTimeout(() => setIsJumping(false), 200);
    }, 400);
  }, [gameState, isJumping]);

  const startGame = () => {
    setGameState('playing');
    setScore(0);
    setPlayerY(60);
    setIsJumping(false);
    setObstacles([]);
    setCollectibles([]);
    setGameSpeed(3);
    toast("🎵 LET'S GO! 🎵");
  };

  const gameOver = useCallback(() => {
    setGameState('gameOver');
    if (score > highScore) {
      setHighScore(score);
      localStorage.setItem('astroworld-high-score', score.toString());
      toast("🏆 NEW HIGH SCORE! STRAIGHT UP! 🏆");
    } else {
      toast("💀 Game Over! It's lit though! 💀");
    }
  }, [score, highScore]);

  // Game logic continues...
  // [Rest of the component code from lines 72-379]

  return (
    // [Complete JSX from the component]
  );
};

export default GameRunner;
